@function cp($target, $container)
    @return calc-percent($target/$container) * 100%

@function px-em($base-px,$changing-px)
    @return pixel-to-ems($changing-px/$base-px)
    
=vendor-prefix($name,$argument)
    -webkit-#{$name}: #{$argument}
    -ms-#{$name}: #{$argument}
    -moz-#{$name}: #{$argument}
    -o-#{$name}: #{$argument}
    #{$name}: #{$argument}

=alert-message($BGcolor)
    height: 150px
    background: rgba($BGcolor, 0.95)
    +border-radius(2px)
    margin: 10px 10px 15px 10px
    overflow: hidden
    @extend .bg-shadow
    h3
        color: lighten($BGcolor, 40)
        padding: 5px
        background: darken($BGcolor, 10)
        +border-radius(2px)
        text-align: center
    > p
        margin: 5px
        overflow-y: auto

=border-radius($radius)
    border-radius: $radius

=button-border-trim($trimColor)
    border: inset 1px solid $trimColor

=clearfix
    &:after, &:before
        content: ""
        display: table
    &:after
        clear: both
        zoom: 1

=counter-loop($start,$end)
    @for $i from $start through $end
        &:nth-child(#{$i}):after
            content: '#{$i}'

=font-face($family, $path, $svg, $weight: normal, $style: normal)
    @font-face
        font-family: $family
        src: url('#{$path}.eot')
        src: url('#{$path}.eot?#iefix') format('embedded-opentype'), url('#{$path}.woff') format('woff'), url('#{$path}.ttf') format('truetype'), url('#{$path}.svg##{$svg}') format('svg')
        font-weight: $weight
        font-style: $style

=progress-bar-gradients($from, $to)
    background-image: -webkit-linear-gradient(-45deg, $from 25%, transparent 25%, transparent 50%, $to 50%, $to 75%, transparent 75%, transparent)
    background-image: -moz-linear-gradient(-45deg, $from 25%, transparent 25%, transparent 50%, $to 50%, $to 75%, transparent 75%, transparent)
    background-image: -ms-linear-gradient(-45deg, $from 25%, transparent 25%, transparent 50%, $to 50%, $to 75%, transparent 75%, transparent)
    background-image: -o-linear-gradient(-45deg, $from 25%, transparent 25%, transparent 50%, $to 50%, $to 75%, transparent 75%, transparent)
    background-image: linear-gradient(-45deg, $from 25%, transparent 25%, transparent 50%, $to 50%, $to 75%, transparent 75%, transparent)

=slidePanel-tab-position($tab_top, $tab_right, $tab_bottom, $tab_left, $tab_position, $tab_color)
    top: $tab_top
    right: $tab_right
    bottom: $tab_bottom
    left: $tab_left
    position: $tab_position
    background: $tab_color
    width: 25px
    height: 150px
    transition: all 0.3s ease-in-out
    vertical-align: middle
    > h3
        padding: 0px 15px
        transform: rotate(90deg)
        -webkit-transform: rotate(90deg)
        -moz-transform: rotate(90deg)
        -ms-transform: rotate(90deg)
        -o-transform: rotate(90deg)
        filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)

=slidePanel-position($panel_top, $panel_right, $panel_bottom, $panel_left, $panel_position, $heading_color)
    top: $panel_top
    right: $panel_right
    bottom: $panel_bottom
    left: $panel_left
    position: $panel_position
    width: 30%
    height: 30%
    background: lighten($primary-color, 40)
    transition: all 0.3s ease-in-out
    text-align: left
    overflow-y: auto
    > h3
        background: $heading_color
        margin: 0
        padding: 0.4em
        text-align: center
        position: relative
    li
        padding: 10px
        display: block
        color: #333000
        word-wrap: break-word
        &:hover,&:focus
            background: lighten($BGcolor-info, 30)
        a
            &:active
                background: lighten($BGcolor-info, 20)

=slidepanel-hover($hover_position_L, $hover_position_R)
    &:hover,&:focus
        [class*="slidePanel-inner"]
            left: $hover_position_L
            right: $hover_position_R
            z-index: 5



// Grid System
// -----------

// Centered container element
=container-fixed
    margin-right: auto
    margin-left: auto
    padding-left: $grid-gutter-width / 2
    padding-right: $grid-gutter-width / 2
    +clearfix

// Creates a wrapper for a series of columns
=make-row($gutter: $grid-gutter-width)
    margin-left: $gutter / -2
    margin-right: $gutter / -2
    +clearfix

// Generate the extra small columns
=make-phone-column($columns, $gutter: $grid-gutter-width)
    position: relative
    float: left
    width: percentage($columns / $grid-columns)
    min-height: 1px
    padding-left: $gutter / 2
    padding-right: $gutter / 2

=make-phone-column-offset($columns)
    @media (min-width: $screen-phone-min)
        margin-left: percentage($columns / $grid-columns)

=make-phone-column-push($columns)
    @media (min-width: $screen-phone-min)
        left: percentage($columns / $grid-columns)

=make-phone-column-pull($columns)
    @media (min-width: $screen-phone-min)
        right: percentage($columns / $grid-columns)

// Generate the small columns
=make-tablet-column($columns, $gutter: $grid-gutter-width)
    position: relative
    min-height: 1px
    padding-left: $gutter / 2
    padding-right: $gutter / 2
    @media (min-width: $screen-tablet-min)
        float: left
        width: percentage($columns / $grid-columns)

=make-tablet-column-offset($columns)
    @media (min-width: $screen-tablet-min)
        margin-left: percentage($columns / $grid-columns)

=make-tablet-column-push($columns)
    @media (min-width: $screen-tablet-min)
        left: percentage($columns / $grid-columns)

=make-tablet-column-pull($columns)
    @media (min-width: $screen-tablet-min)
        right: percentage($columns / $grid-columns)

// Generate the medium columns
=make-desktop-column($columns, $gutter: $grid-gutter-width)
    position: relative
    min-height: 1px
    padding-left: $gutter / 2
    padding-right: $gutter / 2
    @media (min-width: $screen-desktop-min)
        float: left
        width: percentage($columns / $grid-columns)

=make-desktop-column-offset($columns)
    @media (min-width: $screen-desktop-min)
        margin-left: percentage($columns / $grid-columns)

=make-desktop-column-push($columns)
    @media (min-width: $screen-desktop-min)
        left: percentage($columns / $grid-columns)

=make-desktop-column-pull($columns)
    @media (min-width: $screen-desktop-min)
        right: percentage($columns / $grid-columns)

// Generate the large columns
=make-lgDesktop-column($columns, $gutter: $grid-gutter-width)
    position: relative
    min-height: 1px
    padding-left: $gutter / 2
    padding-right: $gutter / 2
    @media (min-width: $screen-lgDesktop-min)
        float: left
        width: percentage($columns / $grid-columns)

=make-lgDesktop-column-offset($columns)
    @media (min-width: $screen-lgDesktop-min)
        margin-left: percentage($columns / $grid-columns)

=make-lgDesktop-column-push($columns)
    @media (min-width: $screen-lgDesktop-min)
        left: percentage($columns / $grid-columns)

=make-lgDesktop-column-pull($columns)
    @media (min-width: $screen-lgDesktop-min)
        right: percentage($columns / $grid-columns)

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
=make-grid-columns
    $list: ""
    $i: 1
    $list: ".blk-phone-#{$i}, .blk-tablet-#{$i}, .blk-desktop-#{$i}, .blk-lgDesktop-#{$i}"
    @for $i from 1 + 1 through $grid-columns
        $list: "#{$list}, .blk-phone-#{$i}, .blk-tablet-#{$i}, .blk-desktop-#{$i}, .blk-lgDesktop-#{$i}"
    #{$list}
        // position: relative
        // Prevent columns from collapsing when empty
        min-height: 1px
        // Inner gutter via padding
        padding-top: $grid-gutter-width
        padding-bottom: $grid-gutter-width
        padding-left: $grid-gutter-width / 2
        padding-right: $grid-gutter-width / 2

// [converter] This is defined recursively in LESS, but Sass supports real loops
=float-grid-columns($class)
    $list: ""
    $i: 1
    $list: ".blk-#{$class}-#{$i}"
    @for $i from 1 + 1 through $grid-columns
        $list: "#{$list}, .blk-#{$class}-#{$i}"
    #{$list}
        float: left

=calc-grid-column($index, $class, $type)
    @if $type == width and $index > 0
        .blk-#{$class}-#{$index}
            width: percentage($index / $grid-columns)
    @if $type == push
        .blk-#{$class}-push-#{$index}
            left: percentage($index / $grid-columns)
    @if $type == pull
        .blk-#{$class}-pull-#{$index}
            right: percentage($index / $grid-columns)
    @if $type == offset
        .blk-#{$class}-offset-#{$index}
            margin-left: percentage($index / $grid-columns)

// [converter] This is defined recursively in LESS, but Sass supports real loops
=loop-grid-columns($columns, $class, $type)
    @for $i from 0 through $columns
        +calc-grid-column($i, $class, $type)

// Create grid for specific class
=make-grid($class)
    +float-grid-columns($class)
    +loop-grid-columns($grid-columns, $class, width)
    +loop-grid-columns($grid-columns, $class, pull)
    +loop-grid-columns($grid-columns, $class, push)
    +loop-grid-columns($grid-columns, $class, offset)
